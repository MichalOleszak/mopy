name: CI/CD

on:
  push:
    branches: [master]

env:
  PYTHONPATH: "."

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          pip3 install poetry
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          pip3 install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Run test suite
        run: make test

  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      sha: ${{ steps.version.outputs.sha }}
      full: ${{ steps.version.outputs.version }}-${{ steps.version.outputs.sha }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Get codebase version and sha
        id: version
        run: |
          echo ::set-output name=version::$(cat config.py | grep CODEBASE_VERSION | cut -d '"' -f 2)
          echo ::set-output name=sha::${GITHUB_SHA::8}

  docker:
    runs-on: ubuntu-latest
    needs:
      - run-tests
      - versioning
    strategy:
      matrix:
        service:
          - my.service.name
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Configure Docker
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image tags
        id: tag
        run: |
          echo ::set-output name=local::$(make ${{ matrix.service }}.docker.image):latest
          echo ::set-output name=remote::${{ steps.ecr.outputs.registry }}/$(make ${{ matrix.service }}.docker.image):${{ needs.versioning.outputs.full }}

      - name: Build, tag and push container
        run: |
          make ${{ matrix.service }}.docker.build
          docker tag ${{ steps.tag.outputs.local }} ${{ steps.tag.outputs.remote }}
          docker push ${{ steps.tag.outputs.remote }}

  deploy:
    runs-on: self-hosted
    needs:
      - versioning
      - docker
    defaults:
      run:
        working-directory: infra/configurations/dev/aws
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform override
        run: |
          cat <<EOT >> version_override.tf
          locals {
            codebase_version = "${{ needs.versioning.outputs.full }}"
          }
          EOT

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
